// ===============previous code===================
// const groupBy = (array, key) => {
//   return array.reduce((result, currentValue) => {
//     (result[currentValue[key]] = result[currentValue[key]] || []).push(
//       currentValue
//     );
//     return result;
//   }, {});
// };

// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, q.options, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.qpaper_id=${req.params.id} `,
//     (err, rslt) => {
//       if (err) console.log(err);

//       const r = groupBy(rslt, "section_name");
//       // console.log(r);

//       res.send(r);
//     }
//   );
// });

// app.get(`/api/getSections/:id`, (req, res) => {
//   con.query(
//     `select s.section_name as section from sections s where s.paper_id=${req.params.id}`,
//     (err, result) => {
//       if (err) console.log(err);
//       res.send(result);
//     }
//   );
// });
// // ===============previous code ends===================

// ===============================================
// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.paper_id=${req.params.id} `,
//     (err, result) => {
//       if (err) console.log(err);

//       res.send(result);
//     }
//   );
// });

// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.paper_id=${req.params.id} `,
//     (err, result) => {
//       if (err) console.log(err);

//       // send paper as required format
//       console.log("section in getSection ", section.data);

//       res.send(result);
//     }
//   );
// });

// app.get("/api/getAllQuestions", (req, res) => {
//   con.query(`select * from questions`, (err, result) => {
//     if (err) console.log(err);
//     // res.send("yes it working");
//     res.send(result);
//   });
//   // res.send("show result");
//   console.log("result");
// });

// initial testing
// con.query(`select * from questions`, (err, res, fields) => {
//   if (err) {
//     return console.log(err);
//   }
//   return console.log(res);
// });

// module.exports = con;
// =====================================================

//====================Set User Score in DB====================
// app.post("/api/storeMarks/:user_id", (req, res) => {
//   const user_id = req.params.user_id;
//   const { qp_id, score } = req.body;
//   con.query(
//     `insert into marks (user_id, paper_id, score, attempt_no) values (?, ?, ?, ?)`,
//     [user_id, qp_id, score, new Date()],
//     (err, result) => {
//       if (err) {
//         console.log(err);
//         return res.status(400).json({ err: "Invalid data" });
//       } else {
//         console.log(result);
//         return res
//           .status(201)
//           .json({ msg: `marks uploaded successfully`, data: result });
//       }
//     }
//   );
// });

//====================Set User Score in DB end====================

{
  /* <div class="col mb-4 px-4">
              <div class="card h-100 py-2 border-0">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-warning font-weight-light text-uppercase mb-1 ">
                        Time/Ques
                      </div>
                      <div class="h5 mb-0 font-weight-lightbold text-gray-700">
                        <span>time = 0 Min 18 Sec</span>
                      </div>
                    </div>
                    <div class="col-auto">
                      <div class="text-warning">
                        <span class="fa-stack fa-2x">
                          <i
                            class="fa fa-circle fa-stack-2x"
                            style={{ opacity: "0.2" }}
                          ></i>
                          <i class="fa fa-hourglass-half fa-stack-1x"></i>
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div> */
}

{
  /* <div className="col mb-4">
          <div className="border-3 border-start border-success shadow h-100 py-2">
            <div className="card-body">
              <div className="row no-gutters align-items-center">
                <div className="col mr-2">
                  <div className="text-xs font-weight-bold text-success text-uppercase mb-1 ">
                    Rank (AIR)
                  </div>
                  <div className="h5 mb-0 font-weight-bold text-gray-800">
                    <span>RANK</span>
                    <span> / </span>
                    <span>USERS</span>
                  </div>
                </div>
                <div className="col-auto">
                  <i
                    className="fa fa-list-ol text-gray-300"
                    style={{ color: "#cfd1d3", fontSize: "24px" }}
                  ></i>
                </div>
              </div>
            </div>
          </div>
        </div> */
}

{
  /* <div class="pt-1 d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
                  <p class="lead fw-normal mb-0 me-3">Sign in with</p>
                  <button
                    type="button"
                    class="btn btn-primary btn-floating mx-1"
                  >
                    <i class="fa fa-google"></i>
                  </button>
                </div> */
}
{
  /* 
                <div class="divider d-flex align-items-center my-4">
                  <p class="text-center fw-bold mx-3 mb-0">Or</p>
                </div> */
}

{
  /* <div
        className="d-flex justify-content-end flex-nowrap m-2"
        style={{ width: "97vw" }}
      >
        <div className=" justify-content-end">
          <button type="button" class="btn btn-info text-white mx-3">
            <i className="fa fa-file pe-2"></i>
            Login
          </button>
        </div>
        <div className="justify-content-end">
          <button type="button" class="btn btn-info text-white ">
            <i className="fa fa-file pe-2"></i>
            Sign Up
          </button>
        </div>
      </div> */
}

// (
// <div
//   class="toast"
//   role="alert"
//   aria-live="assertive"
//   aria-atomic="true"
// >
//   <div class="toast-header">
//     <img src="..." class="rounded me-2" alt="..." />
//     <strong class="me-auto">Bootstrap</strong>
//     <small>11 mins ago</small>
//     <button
//       type="button"
//       class="btn-close"
//       data-bs-dismiss="toast"
//       aria-label="Close"
//     ></button>
//   </div>
//   <div class="toast-body">
//     Hello, world! This is a toast message.
//   </div>
// </div>
// ) :

{
  /* <div class="d-flex justify-content-between align-items-center">
                  <div class="form-check mb-0">
                    <input
                      class="form-check-input me-2"
                      type="checkbox"
                      value=""
                      id="form2Example3"
                    />
                    <label class="form-check-label" for="form2Example3">
                      Remember me
                    </label>
                  </div>
                  <a href="#!" class="text-body">
                    Forgot password?
                  </a>
                </div> */
}

// questionscreen ======================
// {Object.keys(this.props.questions).length ? (
//   <div className="row  mx-0">
//     <QuesScreenLeftPanel
//       questions={this.props.questions}
//       answers={this.props.answers}
//       MarkForReview={this.props.MarkForReview}
//       clearResponse={this.clearResponse}
//       SetAnswer={this.props.SetAnswer}
//       updateCheckedOption={this.updateCheckedOption}
//       checkedOption={this.state.checkedOption}
//     />
//     <QuesScreenRightPanel
//       questions={this.props.questions}
//       currentSection={this.props.currentSection}
//       onChangeQues={this.onChangeQues}
//       updateCheckedOption={this.updateCheckedOption}
//     />
//   </div>
// )
// :
// (
//   <>
//     <nav
//       className="navbar
//  py-0 px-3 text-white"
//       style={{ backgroundColor: "#29385c" }}
//     >
//       NIMCET - 2021
//     </nav>
{
  /* <div
              className="d-flex justify-content-center align-items-center"
              style={{ height: "90vh" }}
            >
              <h1>Question Paper not found</h1>
            </div> */
}
//     <Loader />
//   </>
// )}
